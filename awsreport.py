#!/usr/bin/env python3
"""
Script for aws client report about instance resource

use: awsreport.py [options]... <instance_id>

This script generate a report about instance consumption resource after you give me the json data generated by aws
cloudwatch command.

Options:

    -c, --client Name of the client which is the report for (optional but recommended).

    -o, --os     Name of the operating system of the instance (optional but recommended).

    -p, --path   Path where the data are located to process, by default if it is not set, i will assume the current work directory.
"""

import json
import time
from json import JSONDecodeError

import plotly.graph_objs as go
import plotly.offline as py
import sys
from plotly import tools
from optparse import OptionParser

# Command to get the AWS statistics data.
# aws cloudwatch get-metric-statistics --namespace AWS/EC2 --metric-name CPUUtilization --start-time 2018-10-01T23:00:00 --end-time 2018-10-26T23:00:00 --period 3600 --statistics Maximum --dimensions Name=InstanceId,Value=i-071afd3f185b5d7db > jsondatacpu.txt
# aws cloudwatch get-metric-statistics --namespace AWS/EC2 --metric-name NetworkIn, --start-time 2018-10-01T23:00:00 --end-time 2018-10-30T23:00:00 --period 3600 --statistics Average --dimensions Name=InstanceId,Value=i-071afd3f185b5d7db > jsondatanetin.txt
# aws cloudwatch get-metric-statistics --namespace AWS/EC2 --metric-name NetworkOut --start-time 2018-10-01T23:00:00 --end-time 2018-10-30T23:00:00 --period 3600 --statistics Average --dimensions Name=InstanceId,Value=i-071afd3f185b5d7db > jsondatanetout.txt


INSTANCE_OS = ''
CLIENT = ''
CWD = '.'


def parse_data_to_json(file):
    with open(file) as json_data:
        data = json.load(json_data)
    return data


def sort_data_by_time(json_dict):
    json_dict.sort(key=lambda x: time.mktime(time.strptime(x['Timestamp'], '%Y-%m-%dT%H:%M:%SZ')))
    return json_dict


parser = OptionParser()

parser.add_option("-c", "--client", dest="client", help="client name", default=CLIENT)

parser.add_option("-o", "--os", dest="os", help="instance operating system", default=INSTANCE_OS)

parser.add_option("-p", "--path", dest="path", help="path where to grab the data of the instance", default=CWD)

(options, args) = parser.parse_args()

if not args:
    print(__doc__)
    sys.exit(1)
else:
    options.id = args[0]

base_path = options.path

PATHS = [base_path+'jsondatanetin%s.txt' % options.id, base_path+'jsondatanetout%s.txt' % options.id,
         base_path+'jsondatacpu%s.txt' % options.id]

cpu = []
ctime = []
netin = []
nitime = []
netout = []
notime = []
count = 0

try:
    for path in PATHS:
        for row in sort_data_by_time(parse_data_to_json(path)['Datapoints']):
            if count == 0:
                netin.append(row['Average'])
                nitime.append(row['Timestamp'])
            elif count == 1:
                netout.append(row['Average'])
                notime.append(row['Timestamp'])
            else:
                cpu.append(row['Maximum'])
                ctime.append(row['Timestamp'])
        count = count+1
except JSONDecodeError as e:
    print("Something goes wrong %s" % e)

#####
# Network Utilization Chart
#####

print(netin, nitime, '\n')

print(netout, notime, '\n')

trace_net_in = go.Scatter(

    x=nitime,
    y=netin,
    name='Network-In'
)

trace_net_out = go.Scatter(

    x=notime,
    y=netout,
    name='Network-Out'
)

# net_layout = go.Layout(title="<b>Window's Server 2016</b> <br> Network Utilization")
# net_data = [trace_net_in, trace_net_out]

# py.offline.plot({"data": data, "layout": layout}, auto_open=False, filename='envases-chart-net-report.html')
# net_chart = py.plot({"data": data, "layout": layout})

#####
# CPU Utilization Chart
#####
print(cpu, ctime, '\n')

trace_cpu = go.Scatter(
    x=ctime,
    y=cpu,
    name='CPU-Percentage'
)

# cpu_layout = go.Layout(title="<b>Window's Server 2016</b> <br> CPU Utilization")
# cpu_layout = dict(
#     title="<b>Window's Server 2016</b> <br> CPU Utilization"
# )

# cpu_chart = py.plot({"data": data, "layout": layout})

chart_report = tools.make_subplots(rows=2, cols=2, specs=[[{}, {}], [{'colspan': 2}, None]],
                                   subplot_titles=('<b>Network In</b>', '<b>Network Out</b>', '<b>CPU Utilization</b>'))
chart_report.append_trace(trace_net_in, 1, 1)
chart_report.append_trace(trace_net_out, 1, 2)
chart_report.append_trace(trace_cpu, 2, 1)

chart_report['layout'].update(showlegend=True,
                              title="<b> %s Resource Report </b> <br> <b> %s </b> <br> <i> %s </i>" % (
                                  options.client, options.os, options.id))

py.plot(chart_report, filename='%s-report.html' % options.client.replace(' ', '').lower())
