#!/usr/bin/env python3
"""
Script for aws client report about instance resource

use: awsreport.py [options]... <instance_id>

This script generate a report about instance consumption resource after you give me the json data generated by aws
cloudwatch command.

Options:

    -c, --client Name of the client which is the report for (optional but recommended).

    -o, --os     Name of the operating system of the instance (optional but recommended).

    -p, --path   Path where the data are located to process, by default if it is not set, i will assume the current work directory.
"""

import json
import time
import plotly.graph_objs as go
import plotly.offline as py
import sys
import os
from plotly import tools
from optparse import OptionParser

import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from os.path import basename

# Command to get the AWS statistics data.
# aws cloudwatch get-metric-statistics --namespace AWS/EC2 --metric-name CPUUtilization --start-time `date +%Y-%m-01T23:00:00` --end-time `date +%Y-%m-%dT23:00:00` --period 3600 --statistics Maximum --dimensions Name=InstanceId,Value=i-071afd3f185b5d7db > jsondatacpui-071afd3f185b5d7db.txt
# aws cloudwatch get-metric-statistics --namespace AWS/EC2 --metric-name NetworkIn --start-time `date +%Y-%m-01T23:00:00` --end-time `date +%Y-%m-%dT23:00:00` --period 3600 --statistics Average --dimensions Name=InstanceId,Value=i-071afd3f185b5d7db > jsondatanetini-071afd3f185b5d7db.txt
# aws cloudwatch get-metric-statistics --namespace AWS/EC2 --metric-name NetworkOut --start-time `date +%Y-%m-01T23:00:00` --end-time `date +%Y-%m-%dT23:00:00` --period 3600 --statistics Average --dimensions Name=InstanceId,Value=i-071afd3f185b5d7db > jsondatanetouti-071afd3f185b5d7db.txt


INSTANCE_OS = ''
CLIENT = ''
CWD = '.'
GMAIL_USER =  os.getenv('GMAIL_USER')
GMAIL_PASSWORD = os.getenv('GMAIL_PASSWORD')
GMAIL_SEND_TO = os.getenv('GMAIL_SEND_TO')


def send_email(send_from: str, subject: str, text: str,
               send_to: list, file=None):
    send_to = send_from if not send_to else send_to
    msg = MIMEMultipart()
    msg['From'] = send_from
    if type(send_to) == list:
        send_to = ', '.join(send_to)
    msg['To'] = send_to
    msg['Subject'] = subject
    msg.attach(MIMEText(text))

    attach = open(file, 'rb')
    ext = file.split('.')[-1:]
    print(ext)
    attached_file = MIMEApplication(attach.read(), _subtype=ext)
    attached_file.add_header('content-disposition', 'attachment', filename=basename(file))
    msg.attach(attached_file)

    smtp = smtplib.SMTP(host="smtp.gmail.com", port=587)
    smtp.starttls()
    smtp.login(GMAIL_USER, GMAIL_PASSWORD)
    smtp.sendmail(send_from, send_to, msg.as_string())
    smtp.close()


def parse_data_to_json(file):
    with open(file) as json_data:
        data = json.load(json_data)
    return data


def sort_data_by_time(json_dict):
    json_dict.sort(key=lambda x: time.mktime(time.strptime(x['Timestamp'], '%Y-%m-%dT%H:%M:%SZ')))
    return json_dict


parser = OptionParser()

parser.add_option("-c", "--client", dest="client", help="client name", default=CLIENT)

parser.add_option("-o", "--os", dest="os", help="instance operating system", default=INSTANCE_OS)

parser.add_option("-p", "--path", dest="path", help="path where to grab the data of the instance", default=CWD)

(options, args) = parser.parse_args()

if not args:
    print(__doc__)
    sys.exit(1)
else:
    options.id = args[0]

base_path = options.path

PATHS = [base_path+'jsondatanetin%s.txt' % options.id, base_path+'jsondatanetout%s.txt' % options.id,
         base_path+'jsondatacpu%s.txt' % options.id]

cpu = []
ctime = []
netin = []
nitime = []
netout = []
notime = []
count = 0

try:
    for path in PATHS:
        for row in sort_data_by_time(parse_data_to_json(path)['Datapoints']):
            if count == 0:
                netin.append(row['Average'])
                nitime.append(row['Timestamp'])
            elif count == 1:
                netout.append(row['Average'])
                notime.append(row['Timestamp'])
            else:
                cpu.append(row['Maximum'])
                ctime.append(row['Timestamp'])
        count = count+1
except json.JSONDecodeError as e:
    print("Something goes wrong %s" % e)

#####
# Network Utilization Chart
#####

print(netin, nitime, '\n')

print(netout, notime, '\n')

trace_net_in = go.Scatter(

    x=nitime,
    y=netin,
    name='Network-In'
)

trace_net_out = go.Scatter(

    x=notime,
    y=netout,
    name='Network-Out'
)

#####
# CPU Utilization Chart
#####
print(cpu, ctime, '\n')

trace_cpu = go.Scatter(
    x=ctime,
    y=cpu,
    name='CPU-Percentage'
)

chart_report = tools.make_subplots(rows=2, cols=2, specs=[[{}, {}], [{'colspan': 2}, None]],
                                   subplot_titles=('<b>Network In</b>', '<b>Network Out</b>', '<b>CPU Utilization</b>'))
chart_report.append_trace(trace_net_in, 1, 1)
chart_report.append_trace(trace_net_out, 1, 2)
chart_report.append_trace(trace_cpu, 2, 1)

chart_report['layout'].update(showlegend=True,
                              title="<b> %s Resource Report </b> <br> <b> %s </b> <br> <i> %s </i>" % (
                                  options.client, options.os, options.id))
file_name = options.path+options.client.replace(' ', '').lower()
file_name = '%s-report.html' % file_name
py.plot(chart_report, filename=file_name)

###
# Send email section
###

send_from = 'hector.guerrero@cibersys.com'
subject = 'GDC REPORT - %s %s %s' % (options.client, options.os, options.id)
text = 'HTML - %s %s %s' % (options.client, options.os, options.id)
file = file_name
send_email(send_from, subject, text, None, file)
